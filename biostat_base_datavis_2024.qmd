---
title: "R Basic visualisation"
author: "Bogdan Sotnikov"
format: html
editor: visual
---

```{r}
# Libraries
library(tidyverse)
library(ggExtra)
library(ggridges)
library(ggpubr)
library(rstatix)
library(geomtextpath)
```

# Мастерим датасет

```{r}
# Скрываем и выносим за скобки
set.seed(1980)
n = 280
values <- c(-20, -10, -5, 0, 5, 10, 20)
## 4 функции для генерации очков каждого из факультетов
generate_random_vars_G1 <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 13, 
                                      replace = TRUE, 
                                      prob = c(0.4, 0.35, 0.25, 0.25, 0.15, 0.1, 0.01))
      ))
    )
}

generate_random_vars_G2 <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 19, 
                                      replace = TRUE, 
                                      prob = c(0.1, 0.2, 0.25, 0.3, 0.25, 0.1, 0.01))
      ))
    )
}

generate_random_vars_G3 <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 11, 
                                      replace = TRUE, 
                                      prob = c(0.05, 0.1, 0.2, 0.4, 0.2, 0.15, 0.03))
      ))
    )
}

generate_random_vars_G4 <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 10, 
                                      replace = TRUE, 
                                      prob = c(0.03, 0.1, 0.1, 0.2, 0.2, 0.15, 0.03))
      ))
    )
}

generate_random_vars_G5 <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 15, 
                                      replace = TRUE, 
                                      prob = c(0.03, 0.1, 0.1, 0.3, 0.25, 0.3, 0.35))
      ))
    )
}

generate_random_vars_H <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 77, 
                                      replace = TRUE, 
                                      prob = c(0.005, 0.1, 0.19, 0.4, 0.2, 0.1, 0.005))
      ))
    )
}

generate_random_vars_R <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 58, 
                                      replace = TRUE, 
                                      prob = c(0.01, 0.08, 0.13, 0.2, 0.25, 0.31, 0.02))
      ))
    )
}

generate_random_vars_Sf <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 38, 
                                      replace = TRUE, 
                                      prob = c(0.001, 0.01, 0.07, 0.2, 0.25, 0.2, 0.1))
      ))
    )
}

generate_random_vars_Sm <- function(data) {
  data %>%
    bind_cols(
      map_dfc(1:40, ~ tibble(
        !!paste0("week ", .x) := sample(values, 39, 
                                      replace = TRUE, 
                                      prob = c(0.12, 0.21, 0.31, 0.1, 0.12, 0.03, 0.002))
      ))
    )
}

## Функция для генерации оценок на экзамене
exam <- function(n){
  ex <- rnorm(n, 60, 25)
  ex <- case_when(
    ex > 100 ~ 100,
    ex < 0 ~ 0,
    TRUE ~ round(ex, 0)
  )
  return(ex)
}



## Генерация первичного датасета
hogwarts <- tibble(
  id = 1:280,
  house = sample(c("Gryffindor", "Hufflepuff",
                   "Ravenclaw", "Slytherin"), n, replace = TRUE),
  course = sample(1:7, n, replace = TRUE),
  sex = sample(c("male", "female"), n, replace = TRUE),
  population = sample(1:5, n , replace = TRUE)
)


## Генерация баллов факультетов
gr1 <- generate_random_vars_G1(hogwarts |> filter(house == "Gryffindor", population == 1)|> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0.3, 0.5, 0.2), size = 1)))
gr2 <- generate_random_vars_G2(hogwarts |> filter(house == "Gryffindor", population == 2)|> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0.3, 0.5, 0.2), size = 1)))
gr3 <- generate_random_vars_G3(hogwarts |> filter(house == "Gryffindor", population == 3)|> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0.3, 0.5, 0.2), size = 1)))
gr4 <- generate_random_vars_G4(hogwarts |> filter(house == "Gryffindor", population == 4)|> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0.3, 0.5, 0.2), size = 1)))
gr5 <- generate_random_vars_G5(hogwarts |> filter(house == "Gryffindor", population == 5)|> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0.3, 0.5, 0.2), size = 1)))
hf <- generate_random_vars_H(hogwarts |> filter(house == "Hufflepuff")|> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0.3, 0.5, 0.2), size = 1)))
rc <- generate_random_vars_R(hogwarts |> filter(house == "Ravenclaw")|> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0.3, 0.5, 0.2), size = 1)))
slm <- generate_random_vars_Sm(hogwarts |> filter(house == "Slytherin", sex == "male") |> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0, 0.2, 0.8), size = 1)))
slf <- generate_random_vars_Sf(hogwarts |> filter(house == "Slytherin", sex == "female") |> rowwise() |> mutate(`blood status` = sample(c("Muggle-borned", "Half-blood", "Pure-blood"), prob = c(0, 0.2, 0.8), size = 1)))

hogwarts <- bind_rows(gr1, gr2, gr3, gr4, gr5, hf, rc, slm, slf) |> 
  rowwise() |> 
  mutate(result = rowSums(across(starts_with("week"))),
         uspevaemost = sample(c(1:5), prob = c(0.15, 0.2, 0.4, 0.22, 0.03), size = 1)) |> 
  bind_cols(
    map_dfc(c("Transfiguration", "Potions", "Herbology",
              "Defence against the dark arts", "History of magic", "Divinations",
              "Astronomy", "Arythmancy", "Care of magical creatures",
              "Muggle studies", "Study of ancient runs", "Flying"
              ), ~ tibble(
      !!paste0(.x, " exam") := exam(280)))
    )


hogwarts <- hogwarts |>
  rowwise() |> 
  mutate(
    `Charms exam` = `Transfiguration exam` + rnorm(1, 0, 15),
    across(ends_with("exam"), ~ case_when(
      uspevaemost == 5 ~ .x + 40,
      uspevaemost == 4 ~ .x + 15,
      uspevaemost == 3 ~ .x + 0,
      uspevaemost == 2 ~ .x - 15,
      uspevaemost == 1 ~ .x - 40,
    )
  ),
  `Potions exam` = case_when(
    house == "Slytherin" ~ `Potions exam` + 50,
    TRUE ~ `Potions exam` - 40,
  ),
  across(ends_with("exam"), ~ case_when(
      .x > 100 ~ 100,
      .x < 0 ~ 100,
      TRUE ~ .x
  )),
  sex = case_when(
    house == "Hufflepuff" ~ sample(c("male", "female"), prob = c(0.3, 0.7), size = 1),
    TRUE ~ sex
  )
  )

hogwarts |> select(ends_with("exam"))
```

# Лекция

## 0. Почему визуализация (pending)

### Себе показать

```{r}
hogwarts |> write_csv("data/hogwarts.csv")
```

### Другим посмотреть

```{r echo=FALSE, eval=FALSE}
set.seed(1999)
data_tibble <- tibble(
  Therapy = rep(c("Drug A", "Drug B"), each = 50),
  `Systolic blood pressure` = c(rnorm(50, 160, 15), rnorm(50, 120, 10))
)

pval_vis <- t_test(data_tibble, `Systolic blood pressure` ~ Therapy) |> 
  mutate(y.position = 190,
         p = if_else(p < 0.0001, "<0.0001", as.character(p)))

data_tibble |> 
  ggplot(aes(x = Therapy, y = `Systolic blood pressure`))+
  geom_boxplot(fill = "green", outliers = FALSE)+
  geom_jitter()+
  stat_summary(fun = mean, geom="point", shape=20, size=8, color="red")+
  stat_pvalue_manual(pval_vis, label="p", size = 5, 
                     bracket.size = 0.7)+
  labs(subtitle = get_test_label(pval_vis, detailed=TRUE))+
  annotate("text", x = 1, y = 110, label = "Drug B works better\nthen drug A", size = 5, family = "Times new roman")+
  theme_economist()+
  theme(axis.text.x = element_text(size=18, family = "Roboto"),
      axis.text.y = element_text(size=18, family = "Roboto"),
      axis.title.x = element_text(size=25, family = "Roboto"),
      axis.title.y = element_text(size=25, family = "Roboto"),
      plot.title = element_text(size=30, hjust=0.5, family = "Roboto"),
      plot.subtitle = element_text(size=18, hjust=0.5, family = "Roboto"))
```

![](owl1.jpg){width="2024"}

![](owl2.png)

## 1. Структура ggplot2

![](shrek.png)

```{r ggplotIntro, fig.width=20, fig.height=14}
fillValues <- c("#C50000", "#ECB939", "#41A6D9", "#1F5D25")
names(fillValues) <- hogwarts$house |> unique()
gridLab <- c("Девочки", "Мальчики")
names(gridLab) <- hogwarts$sex |> unique() |> sort()

ggplot(hogwarts, aes(y = house,
                     x = result))+
geom_violin(aes(fill = house))+
geom_boxplot(width = 0.05,
             colour = "grey50")+
geom_vline(xintercept = 0,
           linetype = "dashed",
           colour = "salmon",
           linewidth = 2)+
labs(
title = "Баллы студентов Хогвартса",
subtitle = "Распределение числа баллов у студентов различных факультетов Хогвартса в 2023-2024 учебном году",
y = "Колледж",
x = "Количество очков",
fill = "Колледж",
caption = "Источник: нездоровая фантазия автора лекции"
   )+
coord_flip()+
stat_summary(fun.y=mean, # Дать на вход другие данные
             geom="point",
             shape=21,
             size=10,
             color="grey70",
             fill="#7D5535")+
facet_grid(. ~ sex,
           labeller = labeller(sex = gridLab))+
theme_bw()+
theme(axis.text.x = element_blank(),
    axis.text.y = element_text(size=20,
                               family = "Times new roman"),
    axis.title.x = element_blank(),
    axis.title.y = element_text(size=29,
                                family = "Times new roman"),
    plot.title = element_text(size=32,
                              hjust=0.5,
                              family = "Times new roman"),
    plot.subtitle = element_text(size = 20,
                                 hjust=0.5,
                                 colour = "#7D5535"),
    legend.title = element_text(size=25,
                                family = "Times new roman"),
    legend.text = element_text(size=25,
                               family = "Times new roman",
                               face = "italic"),
    strip.text.x = element_text(size = 25,
                                family = "Times new roman"))+
scale_fill_manual(name = "Факультет",
                  labels = c("Гриффиндор", "Пуффендуй", "Когтевран", "Слизерин"),
                  values = fillValues)+
scale_x_continuous(breaks = seq(-400, 400, by = 50))+
  annotate(geom = "segment", arrow = arrow(), y = rep("Ravenclaw",2), yend = rep("Slytherin",2), x = c(250, -250), xend = c(250, -250), linewidth = 1.3, colour = "black")
```

```{r fig.width=20, fig.height=14}
# Не включаем в итоговую презентацию
hist <- ggplot(hogwarts, aes(x = result))+
  geom_histogram(colour = "grey30", fill = "grey90")+
  theme_bw()+
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())

box <- ggplot(hogwarts, aes(x = result))+
  geom_boxplot()+
  theme_bw()+
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())

qq <- ggplot(hogwarts, aes(sample = result))+
  geom_qq()+
  theme_bw()+
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())

dens <- ggplot(hogwarts, aes(x = result))+
  geom_density()+
  theme_bw()+
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())

dotp <- ggplot(hogwarts, aes(x = result))+
  geom_dotplot()+
  theme_bw()+
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())

freqp <- ggplot(hogwarts, aes(x = result))+
  geom_freqpoly(colour = "salmon2")+
  theme_bw()+
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())

oneVarSixPlots <- ggarrange(plotlist = list(hist, box, qq, dens, dotp, freqp), ncol = 2, nrow = 3)
ggsave("oneVarSixPlots.png", oneVarSixPlots, width = 20, height = 14)

```

## 1 количественная переменная

```{r gh1}
hogwarts$`Transfiguration exam`
ggplot(hogwarts)+
  geom_histogram(aes(x = `Transfiguration exam`, y = after_stat(count)),
                 fill = "green", 
                 colour = "grey50", 
                 position = "identity",
                 bins = ceiling(log2(nrow(hogwarts)) + 1),
                 alpha = 0.5
                  )+
  geom_histogram(aes(x = `Charms exam`),
                 fill = "red", 
                 colour = "grey50", 
                 position = "identity",
                 bins = ceiling(log2(nrow(hogwarts)) + 1),
                 alpha = 0.5
                  )+
  geom_histogram(aes(x = `Potions exam`),
                 fill = "blue", 
                 colour = "grey50", 
                 position = "identity",
                 bins = ceiling(log2(nrow(hogwarts)) + 1),
                 alpha = 0.5
                  )+
  theme_bw()
```

```{r fig.width=20, fig.height=14}
hogwarts |> 
  select(id, sex, `Transfiguration exam`, `Charms exam`, `Potions exam`) |> 
  pivot_longer(-c(id, sex), names_to = "exam", values_to = "score") |> 
  mutate(exam = as.factor(exam)) |> 
  ggplot()+
  geom_histogram(aes(x = score),
                 fill = "green", 
                 colour = "grey50", 
                 position = "identity",
                 bins = ceiling(log2(nrow(hogwarts)) + 1))+
  facet_grid(exam ~ sex)
```

![](box.png)

```{r}
hogwarts |> 
  select(id, sex, `Transfiguration exam`, `Charms exam`, `Potions exam`) |> 
  pivot_longer(-c(id, sex), names_to = "exam", values_to = "score") |> 
  mutate(exam = as.factor(exam)) |> 
  ggplot()+
  geom_boxplot(aes(x = after_stat(ymax), y = score, fill = fct_reorder(exam, score, median)))#+
  # geom_violin(fill = "green")+
  # geom_jitter()
```

```{r}
hogwarts |> 
  select(id, sex, ends_with("exam")) |> 
  pivot_longer(-c(id, sex), names_to = "exam", values_to = "score") |> 
  mutate(exam = as.factor(exam)) |>
  ggplot()+
  geom_density_ridges_gradient(aes(x = score, y = exam, fill = score),  rel_min_height = 0.01)
```

```{r}
hogwarts |> 
  filter(id  %in% 10:40) |> 
  ggplot()+
  geom_segment(aes(x = fct_reorder(as.factor(id), result, median), 
                   xend = fct_reorder(as.factor(id), result, median), 
                   y = 0, 
                   yend = result))+
  geom_point(aes(x = fct_reorder(as.factor(id), result, median),
                 y = result), 
             size = 4, 
             colour = "red")+
  geom_hline(yintercept = 100, linetype = "dashed", color = "coral3", linewidth = 1.4)+
  theme_custom
```

## Барплот

```{r}
ggplot(hogwarts)+
  geom_bar(aes(x = fct_infreq(sex),
               fill = house),
           position = "fill",
           colour = "grey50")+
  geom_hline(yintercept = 0.5,
             colour = "black",
             linetype = "dashed",
             linewidth = 1.5)+
  labs(title = "Доля мальчиков и девочек на факультетах Хогвартса",
       subtitle = "Вносит ли распределение по факультетам дополнительный вклад в мужскую смертность?",
       x = "Факультет",
       fill = "Пол")+
  scale_y_continuous(name = "Доля ", 
                     breaks = seq(0,1, l = 11),
                     labels = paste0(seq(0, 100, l = 11), "%"))+
  scale_fill_manual(labels = c("Гриффиндор", "Пуффендуй", "Когтевран", "Слизерин"), 
                    values = c("Gryffindor" = "#C50000",
                               "Hufflepuff" = "#ECB939", 
                               "Ravenclaw" = "#41A6D9", 
                               "Slytherin" = "#1F5D25"))#+
  coord_polar()

```

![](colorbynames.png)

![](hexcolorggplot.png){width="500"}

```{r fig.width=14, fig.height=9}
set.seed(1999)

ggplot(hogwarts)+
  geom_histogram(aes(x = `Potions exam`))+
  geom_histogram(aes(y = `Charms exam`))

ggplot(hogwarts)+
  geom_point(aes(x = `Charms exam`, y = `Transfiguration exam`))

plot2 <- ggplot(hogwarts)+
  geom_point(aes(x = `Charms exam`, 
                 y = `Transfiguration exam`, 
                 fill = house),
             shape = 21,
             size = 5,
             stroke = 0.5,
             colour = "green")+
  geom_point(data = hogwarts |> filter(`Flying exam` < 30),
             aes(x = `Potions exam`, y = `Transfiguration exam`), 
             colour = "black", size = 4)+
  geom_smooth(aes(x = `Potions exam`, y = `Transfiguration exam`, colour = house), 
              se = FALSE, method = "lm")+
  facet_grid(. ~ sex)+
  scale_x_continuous(breaks = seq(0, 100, l = 5), labels = paste0(seq(0, 100, l = 5), " баллов"))+
  # annotate("rect", xmin=0, xmax=20, ymin=80 , ymax=100, alpha=0.3, color="blue", fill="blue")+
  # annotate("segment", x = 85, xend = 98.5, y = 0, yend = 0, colour = "brown4", size=3, alpha=0.6, arrow=arrow())+
  # geom_label(aes(x = 10, y = 15), label = "Пуантилистское полотно", size = 7, family = "Times new roman", colour = "magenta", label.padding = unit(0.75, "lines"))+
  theme_bw()+
  theme(
    plot.background = element_rect(fill = "#CCAB6F"),
    panel.background = element_rect(fill = "#E7E3AF", 
                                colour = "#662F19", 
                                linetype = "dashed", 
                                linewidth = 5),
    axis.title.x = element_text(size = 25),
    axis.text.x = element_text(size = 20, 
                               angle = 25),
    axis.title.y = element_text(size = 25),
    axis.text.y = element_text(size = 20),
    axis.ticks.x.bottom = element_blank(),
    axis.ticks.length.y = unit(.3, "cm"),
    legend.justification = c("center"),
    legend.position = c("right"),
    legend.direction = "vertical",
    strip.text = element_text(size = 25, 
                              family = "Times new roman"),

    
    legend.background = element_blank(),
    legend.key = element_rect(fill = "#7D5535", 
                              colour = "#761919", 
                              linewidth = 0.5, 
                              linetype = "solid"), 
    legend.margin = margin(6, 6, 6, 6),
        strip.background = element_rect(colour = "#662F19", 
                                    fill = "#CCAB6F",
                                    linewidth = 1.5),
  )

ggplot(hogwarts)+
  geom_point(aes(x = `Charms exam`, 
                 y = `Transfiguration exam`, 
                 fill = house),
             shape = 21,
             size = 5,
             stroke = 0.5,
             colour = "green")+
  geom_point(data = hogwarts |> filter(`Flying exam` < 30),
             aes(x = `Potions exam`, y = `Transfiguration exam`), 
             colour = "black", size = 4)+
  geom_textsmooth(aes(x = `Potions exam`, y = `Transfiguration exam`, colour = house, label = house), 
              se = FALSE, method = "lm", family = "Times new roman", size = 7, linewidth = 1.3)+
  facet_wrap(vars(house))
```

![](ggplot2shapey.png){width="1200"}

![](shrek2.png)

```{r fig.width=14, fig.height=8}
huffleMailLong <- hogwarts |> 
  filter(
    house == "Hufflepuff",
    sex == "male"
  ) |> 
  select(id, starts_with("week")) |>
  pivot_longer(!id, names_to = "week", values_to = "points") |>
  mutate(
    week = week |> str_sub(start = 5) |> as.double()
  )
ggplot()+
  geom_line(data = huffleMailLong, aes(x = week, y = points, group = id), colour = "grey")+
  geom_line(data = huffleMailLong |> filter(id == 88), aes(x = week, y = points), colour = "green", size = 1.5)+
  theme_bw()
```

## Кунштюки

```{r}

histCustom <- function(df, variable, n){
  df |> filter()
  ggplot()+
    geom_histogram(aes(x = {{get(variable)}}), 
                   fill = "lightgreen", 
                   colour = "grey50",
                   bins = n)+
    labs(
      title = paste0("Гистограмма отметок\n", "за экзамен", variable, "\n с ", n, " столбцами")
    )+
    theme_bw()+
    theme(axis.text.x = element_text(size=25, angle = 15),
    axis.text.y = element_text(size=20,
                               family = "Times new roman"),
    axis.title.x = element_text(size=25),
    axis.title.y = element_text(size=29,
                                family = "Times new roman"),
    plot.title = element_text(size=32,
                              hjust=0.5,
                              family = "Times new roman"))
}

histList <- lapply(5:40, function(x) histCustom(hogwarts, result, x))
histList2 <- map(5:40, \(x) histCustom(hogwarts, result, x))
histList3 <- map2(12:17, 
                  c(`Transfiguration exam`, `Potions exam`, `Herbology exam`, `Defence against the dark arts exam`), 
                  \(x, y) histCustom(hogwarts, x, y))

ggarrange(plotlist = histList2, ncol = 6, nrow = 6)
hogwarts |> select(ends_with("exam")) |> colnames()

lapply(c(`Transfiguration exam`, `Potions exam`), function(x) histCustom(hogwarts, x, 15))
map(c("Transfiguration exam", "Potions exam"), \(x) histCustom(hogwarts, x, 15))
```

```{r}

plot4 <- ggplot(hogwarts)+
  geom_point(aes(x = `Charms exam`,
                 y = `Transfiguration exam`,
                 fill = house),
             shape = 21,
             size = 5,
             stroke = 0.5,
             colour = "green")#+
  geom_point(data = hogwarts |> filter(`Flying exam` < 30),
             aes(x = `Potions exam`, y = `Transfiguration exam`),
             colour = "black", size = 4)+
  geom_textsmooth(aes(x = `Potions exam`, y = `Transfiguration exam`, colour = house, label = house),
              se = FALSE, method = "lm", family = "Times new roman", size = 7, linewidth = 1.3)#+
  facet_wrap(vars(house))

ggMarginal(plot3, type = "histogram")
ggMarginal(plot4, type = "histogram")+
  geom_point(data = hogwarts |> filter(`Flying exam` < 30),
             aes(x = `Potions exam`, y = `Transfiguration exam`),
             colour = "black", size = 4)
```

Зачем сортировать

## Код, который не идет в итоговый ноутбук

```{r boxplotForMeme}
hogwarts |> 
  filter(house == "Hufflepuff") |> 
ggplot()+
  geom_boxplot(aes(y = result), linewidth = 5, outlier.size = 7)+
  theme_transparent()+
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank())

ggsave("boxplot.png", width = 4, height = 5)
```
