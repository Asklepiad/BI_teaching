---
title: "R Basic visualisation"
author: "Bogdan Sotnikov"
format: html
editor: visual
---

## Прелиминарии

Настраиваем qmd, подгружаем пакеты

```{r setup}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE, fig.width=20, fig.height=14)
# install.packages("ggExtra")
# install.packages("ggpubr")
# install.packages("ggridges")
# install.packages("rstatix")
# install.packages("geomtextpath")
library(tidyverse)
library(ggExtra)
library(ggridges)
library(ggpubr)
library(rstatix)
library(geomtextpath) # в зависимости от наличия пакета
```

Подгружаем датасет

```{r}
hogwarts <- read_csv("data/hogwarts.csv")
```

## Действо

![](images/owl1.jpg){width="2024"}

![](images/owl2.png)

![](images/shrek.png)

Обсуждаем слои

```{r ggplotIntro, fig.width=20, fig.height=14}
fillValues <- c("#C50000", "#ECB939", "#41A6D9", "#1F5D25")
names(fillValues) <- hogwarts |> select(house) |> pull() |> unique()
gridLab <- c("Девочки", "Мальчики")
names(gridLab) <- hogwarts |> select(sex) |> pull() |> unique() |> sort()


ggplot(hogwarts, aes(y = house,
                     x = result))+
geom_violin(aes(fill = house))+
geom_boxplot(width = 0.05,
             colour = "grey50")+
geom_vline(xintercept = 0,
           linetype = "dashed",
           colour = "salmon",
           linewidth = 2)+
labs(
title = "Баллы студентов Хогвартса",
subtitle = "Распределение числа баллов у студентов различных факультетов Хогвартса в 2023-2024 учебном году",
y = "Колледж",
x = "Количество очков",
fill = "Колледж",
caption = "Источник: нездоровая фантазия автора лекции"
   )+
coord_flip()+
stat_summary(fun.y=mean, # Дать на вход другие данные
             geom="point",
             shape=21,
             size=10,
             color="grey70",
             fill="#7D5535")+
facet_grid(. ~ sex,
           labeller = labeller(sex = gridLab))+
theme_bw()+
theme(axis.text.x = element_blank(),
    axis.text.y = element_text(size=20,
                               family = "Times new roman"),
    axis.title.x = element_blank(),
    axis.title.y = element_text(size=29,
                                family = "Times new roman"),
    plot.title = element_text(size=32,
                              hjust=0.5,
                              family = "Times new roman"),
    plot.subtitle = element_text(size = 20,
                                 hjust=0.5,
                                 colour = "#7D5535"),
    legend.title = element_text(size=25,
                                family = "Times new roman"),
    legend.text = element_text(size=25,
                               family = "Times new roman",
                               face = "italic"),
    strip.text.x = element_text(size = 25,
                                family = "Times new roman"))+
scale_fill_manual(name = "Факультет",
                  labels = c("Гриффиндор", "Пуффендуй", "Когтевран", "Слизерин"),
                  values = fillValues)+
scale_x_continuous(breaks = seq(-400, 400, by = 50))+
  annotate(geom = "segment", arrow = arrow(), y = rep("Ravenclaw",2), yend = rep("Slytherin",2), x = c(250, -250), xend = c(250, -250), linewidth = 1.3, colour = "black")

# сохраняем кусочек кода в переменную
theme_custom <- theme(axis.text.x = element_text(size=25),
    axis.text.y = element_text(size=20,
                               family = "Times new roman"),
    axis.title.x = element_text(size=25),
    axis.title.y = element_text(size=29,
                                family = "Times new roman"),
    plot.title = element_text(size=32,
                              hjust=0.5,
                              family = "Times new roman"),
    plot.subtitle = element_text(size = 20,
                                 hjust=0.5),
    strip.text.x = element_text(size = 25,
                                family = "Times new roman"),
    strip.text.y = element_text(size = 25,
                                family = "Times new roman"))
```

Распределение количественной переменной

```{r gh1, fig.width=10, fig.height=6}
# 1 количественная переменная

# экспериментируем с параметрами

# after_stat()

# rmd

# несколько гистограмм

# другой геом


# несколько других геомов


```

![](images/colorbynames.png)

Решение проблемы нескольких распределений 1

```{r gf, fig.width=20, fig.height=14}

# трансформируем данные


# лучше делать по строкам или по столбцам
```

![](images/box.png)

Решение проблемы нескольких распределений 2

```{r gbo, fig.width=14, fig.height=10}
gridLab <- c("Трансфигурация", "",  "Зелья")
names(gridLab) <- hogwarts |> select(`Transfiguration exam`, `Defence against the dark arts exam`, `Potions exam`) |> colnames()

# трансформируем данные

# меняем порядок (2)

# добавляем деталей и шум


# добавляем деталей
```

Решение проблемы нескольких распределений 3

![](images/shrek2.png)

```{r}
# риджлайн

```

```{r}
# леденцы в жару


# добавляем примитив, издеваемся над ним
```

Распределение категориальной переменной

```{r gba}
fillValues <- c("#C50000", "#ECB939", "#41A6D9", "#1F5D25")
names(fillValues) <- hogwarts$house |> unique()

# экспериментируем с позицией

# настраиваем оси

# настраиваем оси еще лучше

# делаем палитру

# коловращаем

# как делать не надо
```

![](images/hexcolorggplot.png){width="500"}

2 количественные переменные

```{r gp, fig.width=14, fig.height=9}
shapeLabelNames <- 1:7
shapeLabel <- c(49:55)
names(shapeLabel) <- shapeLabelNames
# подход 1
ggplot(hogwarts)+
  geom_histogram(aes(x = `Charms exam`))+
  geom_histogram(aes(y = `Transfiguration exam`))+
  theme_custom

# подход 2
ggplot(hogwarts)+
  geom_point(aes(x = `Charms exam`, y = `Transfiguration exam`, 
                 colour = as.factor(course), 
                 shape = as.factor(course)), 
             size = 5, 
             # shape = 23, 
             # fill = "blue",
             # colour = "yellow",
             #stroke = 0.5
             )+
  geom_point(data = hogwarts |> filter(course == 7, house == "Gryffindor"), 
             aes(x = `Charms exam`, y = `Transfiguration exam`),
             colour = "red",
             size = 5,
             shape = 1)+
  # facet_grid(.~sex)+
  scale_shape_manual(values = shapeLabel)+
  labs(
    title = "Оценки за экзамены у студентов Хогвартса",
    subtitle = "Данные за 2023-2024 учебный год",
    caption = "Источник: нездоровая фантазия автора датасета",
    x = "Заклинания",
    y = "Трансфигурация",
    colour = "Курс",
    shape = "Курс"
  )+
  scale_x_continuous(breaks = seq(0, 100, l = 11), labels = paste0(seq(0, 100, l = 11), " баллов"))+
  theme(
    plot.background = element_rect(fill = "#CCAB6F"),
    panel.background = element_rect(fill = "#E7E3AF"),
    plot.title = element_text(size = 25),
    axis.title.x = element_text(size = 20, colour = "blue"),
    axis.text.y = element_blank(),
    axis.ticks.length.x = unit(0.3, "cm"),
    axis.text.x = element_text(size = 15, angle = 30, family = "Times new roman", face = "bold"),
    legend.position = "inside",
    legend.justification = "center",
    legend.direction = "horizontal"
  )

# экспериментируем с параметрами

# подсвечиваем часть данных

# аппроксимируем

# фасетируем

# настраиваем тему

# ...задники

# ...заголовки

# ...текст

# ...засечки

# ...легенду

# ...другое

# многострадальный ggtextpath

# еще один способ фасетирования

# сохраняем график в переменную и в файл


############   Цвета для темы   ############
# Задник графика и гридов "#CCAB6F"
# Задник панели "#E7E3AF"
# Контур панели и гридов "#662F19"
# Задник ключей "#7D5535"
# Контур ключей  "#761919" 
############                    ############


```

![](images/ggplot2shapey.png){width="1200"}

```{r gline}
# трансформируем датасет

# смотрим на динамику баллов

# исправляем ситуацию
```

```{r gconv, fig.width=20, fig.height=20}
# Задаем функцию
histCustom <- function(df, variable, n){
  
  }
# Тестируем

# Исправляем

# Делаем конвеер

# Объединяем в график
```

```{r gadd}

# оборачиваем график

# второе распределение

# другие опасности
```

```{r ger}

```

```{r gsu}

```

```{r rstat}

```

## Дополнительные источники

-   [Сайт с примерами графиков и полезными советами](https://r-graph-gallery.com/)
-   [Оригинальная статья с изложением философии ggplot](https://byrneslab.net/classes/biol607/readings/wickham_layered-grammar.pdf)
-   [Документация ggplot](https://ggplot2.tidyverse.org/)
-   [Учебник по data-science от авторов ggplot](https://r4ds.hadley.nz/)
-   [Учебник по ggplot от авторов ggplot (в процессе написания)](https://ggplot2-book.org/)
-   [Телеграм-канал про визуализацию (не в биомедицине, и не на R, но от этого не менее хороший)](https://t.me/nastengraph)
-   [Шпаргалка по ggplot2](https://rstudio.github.io/cheatsheets/html/data-visualization.html)
